apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

android {
    compileOptions.encoding = "UTF-8"
    version = KAKAO_SDK_VERSION
    project.ext.set("defaultDeployPhase", "${project.hasProperty('deploy_phase') ? deploy_phase.toString() : "$DEFAULT_PHASE"}")

    compileSdkVersion ANDROID_BUILD_SDK_VERSION
    buildToolsVersion ANDROID_BUILD_TOOL_VERSION
    publishNonDefault true

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
    }

    defaultConfig {
        minSdkVersion ANDROID_BUILD_MIN_SDK_VERSION
        targetSdkVersion ANDROID_BUILD_TARGET_SDK_VERSION
        versionCode Integer.parseInt(project.AAR_VERSION)
        versionName AAR_VERSION_NAME

        buildConfigField "String", "DEPLOY_PHASE", "\"$project.defaultDeployPhase\""
        buildConfigField "boolean", "SHOW_LOGS", "${project.hasProperty('showLogs') ? showLogs.toBoolean() : true}"
        buildConfigField "String", "SDK_VERSION", "\"$project.version\""
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled false
        }

        debug {
            debuggable true
            minifyEnabled false
        }
    }
}

dependencies {
    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:3.1.2'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
}


publishing {
    repositories {
        maven {
            // change to point to your repo, e.g. http://my.org/repo
            if(project.version.endsWith('-SNAPSHOT')) {
                url NEXUS_SNAPSHOT_REPOSITORY_URL
            } else {
                url NEXUS_RELEASE_REPOSITORY_URL
            }
            credentials {
                username NEXUS_USERNAME
                password NEXUS_PASSWORD
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            groupId KAKAO_SDK_GROUP
            version project.version
            artifactId ARTIFACT_NAME

            println ">>>>>>>>>>>>>>>>>>> version : " + version
            if(project.defaultDeployPhase.toLowerCase() != 'release') {
                artifactId += "-${project.defaultDeployPhase}"
            }

            artifact sourcesJar
            artifact "$buildDir/outputs/$ARTIFACT_TYPE/$ARTIFACT_NAME-DEPLOY_PHASE(${project.defaultDeployPhase})-release.$ARTIFACT_TYPE"

            pom.withXml {
                def licenses = asNode().appendNode('licenses')
                def license = licenses.appendNode('license')
                license.appendNode('name', LICENSE_NAME)
                license.appendNode('url', LICENSE_URL)
                license.appendNode('distribution', LICENSE_DISTRIBUTION)
            }
        }
    }
}

ext.configBuild = { variant ->
    variant.assemble << {
        def aarName = "${project.ARTIFACT_NAME}" +
                "-DEPLOY_PHASE(${project.defaultDeployPhase})" +
                "-${variant.name}.${project.ARTIFACT_TYPE}"

        println "\n============================================================"
        println "project module : $project.ARTIFACT_NAME"
        println "project version : $project.version"
        println "deploy phase : $project.defaultDeployPhase"
        println "output name : $aarName"
        println "============================================================\n"
        copy {
            variant.outputs.each { output ->
                from output.outputFile
                into output.outputFile.parent
                rename { aarName }
            }
        }
    }
}

android.libraryVariants.all { variant ->
    configBuild(variant)
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = SOURCE_CLASSIFIER
}


